pipeline{
    agent any
    tools {
        nodejs "nodejs18" // Name of the installed Node.js version
    }
//    agent {
 //        'any' //'docker-builder'
  //  }
    
    environment{
        dockerImageName = "nodejs-api-template"
        //dockerImageTag = "1.21"
	dockerImageTag = "${env.BUILD_NUMBER}"  //"${currentBuild.number}"
        dockerOnly = 'yes'	
	repo = 'ghcr.io/minvotech/nodejs'
	GHCR_USERNAME = credentials('b6ae1537-20e2-46fd-957f-52b949237f83') // Jenkins credentials ID for GHCR username
        GHCR_TOKEN = credentials('b6ae1537-20e2-46fd-957f-52b949237f83') // Jenkins credentials ID for GHCR token
        IMAGE_NAME = 'nodejs-api-template'
        IMAGE_TAG = "${env.BUILD_ID}" // Tag the image with the Jenkins build ID or use a version tag
        REGISTRY_URL = 'ghcr.io'
        REPO_NAME = 'eslamshehata2/nodejs-api-template' // Replace with your GitHub username and repo name
    }
    parameters {
        string(name: 'NodeImage', defaultValue: "${env.dockerImageTag}", description: 'Description of NodeImage')
    }
    stages {
	stage('Checkout Code') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'b6ae1537-20e2-46fd-957f-52b949237f83', usernameVariable: 'GHCR_USERNAME', passwordVariable: 'GHCR_TOKEN')]) {
                    // Checkout Dockerfile from the repository
                    git credentialsId: 'b6ae1537-20e2-46fd-957f-52b949237f83', 
                        url: 'https://github.com/Minvotech/nodejs-api-template.git',
                        branch: 'main'
                }
            }
        }
	// stage('Install Dependencies') {
 //            steps {
 //                sh 'npm install' // Replace with your package manager command
 //            }
	// }
            
        stage('Build Image'){
            when {
                expression { dockerOnly == 'yes'}
            }
            steps{
             /*dir('pipelines/Web-FrontEnd/'){
                sh "ls -ltrh"
                sh "docker build -t ${env.dockerImageName}:${env.dockerImageTag} -f Dockerfile"
            
                }*/
                sh ' mkdir -p /run/user/1000'
                //sh ' chown -R jenkins:jenkins /run/user/1000'
                sh 'ls -ltrh'
		withCredentials([usernamePassword(credentialsId: 'GITHUB_TOKEN', usernameVariable: 'GHCR_USERNAME', passwordVariable: 'GHCR_TOKEN')]) {
                //withCredentials([usernamePassword(credentialsId: 'b6ae1537-20e2-46fd-957f-52b949237f83', usernameVariable: 'repoUsername', passwordVariable: 'repoPassword')]) {
                    // Checkout Dockerfile from different repository and branch
                    git credentialsId: 'b6ae1537-20e2-46fd-957f-52b949237f83', 
                        url: 'https://github.com/Minvotech/nodejs-api-template.git',
                        branch: 'main' 
                    sh "ls -ltrh"
                    sh 'pwd'
                    sh "docker build -t ${env.dockerImageName}:${env.dockerImageTag} ."
                }
            
            }
        }

	stage('Run Unit Tests') {
            steps {
                script {
                    sh 'mocha --recursive node_modules/text-hex/test.js  --reporter mocha-junit-reporter --timeout 60000 --exit' // Replace with your test runner command
                }
            }
	}
            // postCondition {
            //     outcome = returnStatus() == 0 // Check for failed tests
            // }
        
        
        
        stage ('GHCR Upload'){
            steps {
              script {
                sh "docker image list"
                //approval.requestInputApproval "1", "HOURS", "Do you REALLY want to push the images to OCIR?", "Please confirm.", " Please confirm."
                //def userInput = input(id: 'userApproval', message: 'Do you REALLY want to push the images to OCIR?', parameters: [booleanParam(defaultValue: false, description: 'Confirm push', name: 'confirmPush')])
                //def userOutput = sh(script: "oci iam user list -compartment-id ocid1.compartment.oc1..aaaaaaaa5mqkf4goflrlvbkx5vdzdgpzbmb5mtos5q5rlir5lahlliy4apma", returnStdout: true).trim()

                withCredentials([usernamePassword(credentialsId: 'GITHUB_TOKEN', usernameVariable: 'eslamshehata2', passwordVariable: 'GITHUB_TOKEN')]) {
					sh " docker login --username eslamshehata2 --password ${GITHUB_TOKEN} ghcr.io"
                    sh "docker tag ${env.dockerImageName}:${env.dockerImageTag}  ${env.repo}/${env.dockerImageName}:${env.dockerImageTag}"
                    sh "docker push ${env.repo}/${env.dockerImageName}:${env.dockerImageTag}"
               }
            }
        }
        }
        // stage ('Trigger Deployment'){
        //     steps{
        //       script{
        //          sh "echo ${NodeImage}"
        //          sh "echo ${env.dockerImageTag}"
        //          build(job: 'Kubernetes-Deployment', parameters: [
        //                 string(name: '{NodeImage', value: env.dockerImageTag),
        //             ])
              
        //       }
            
        //     }
        
        // }
    }
}
